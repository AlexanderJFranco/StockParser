
import os
import tkinter as tk
import pandas
from tkinter import *
import pyautogui
import keyboard
import yfinance as yf

tickersymbol =[]

from tkinter import simpledialog

def PullData(ticker):

   i = 0
   j=0
   win = tk.Tk()
   win.wm_title(ticker)
   #win.geometry("900x900")
   tickerData = yf.Ticker(ticker)
   #tickerDf = tickerData.history(period='1d', start='2021-3-29', end='2021-3-30')..
   for i in range(7):
      infoo = tk.Label(win, text="*--*--*--*--*--*--*--*--*--*--*--*--*--")
      infoo.grid(row=15, column=i)
   price = tk.Label(win, text="Current Price: ")
   price.grid(row=0,column=0)
   pricee = tickerData.history()
   cost = (pricee.tail(1)['Close'].iloc[0])
   pricee = tk.Label(win, text=cost)
   pricee.grid(row=1,column=0)


   info = tk.Label(win, text="Current Option Dates: ")
   info.grid(row=0,column=1)
   for item in tickerData.options:
      j += 1
      infoo = tk.Label(win, text=item)
      infoo.grid(row=j,column=1)
      if j==10 :
         break
   j=0
   info = tk.Label(win, text="Current Recommendations: ")
   info.grid(row=0,column=2)

   for item in tickerData.recommendations["Firm"]:
      j += 1
      infoo = tk.Label(win, text=item)
      infoo.grid(row=j,column=2)
      if j==10 :
         break
   j=0
   for item in tickerData.recommendations["To Grade"]:
      j += 1
      infoo = tk.Label(win, text=item)
      infoo.grid(row=j,column=3)
      if j==10 :
         break

   j=0
   for item in tickerData.recommendations["From Grade"]:
      j += 1
      infoo = tk.Label(win, text=item)
      infoo.grid(row=j, column=4)
      if j==10 :
         break

   j = 0
   info = tk.Label(win, text="Earnings Calls: ")
   info.grid(row=0,column=5)
   for index, value in tickerData.calendar.items():
      row = str(value).split('\n')
      for item in row:
         j+=1
         val = item.split("  ")

         infoo = tk.Label(win, text = val[0])
         infoo.grid(row = j, column =5)
         info = tk.Label(win, text = val[len(val)-1])
         info.grid(row = j, column =6)
         if j == 14 or j==7:
            break

   info = tk.Label(win, text="Institutional Holders: ")
   info.grid(row=16,column=1)

   print(tickerData)
   j = 16
   current = 1
   typeptr = 0
   for index, value in tickerData.institutional_holders.items():
     row = str(value).split('\n')
     if typeptr == 1:
        info = tk.Label(win, text="SHARES: ")
        info.grid(row=16, column=2)
     if typeptr == 2:
        info = tk.Label(win, text="DATE REPORTED: ")
        info.grid(row=16, column=3)
     if typeptr == 3:
        info = tk.Label(win, text="PERCENT OUT:  ")
        info.grid(row=16, column=4)
     if typeptr == 4:
        info = tk.Label(win, text="VALUE" )
        info.grid(row=16, column=5)

     for item  in row:
         j+=1
         t=item.split('  ')
         infoo = tk.Label(win, text=str(t[len(t)-1]))
         infoo.grid(row=j, column=current)
         if j == 25:
            break
     j=16
     current += 1
     typeptr+=1

   while(True):
      price.destroy()
      pricee.destroy()
      price = tk.Label(win, text="Current Price: ")
      price.grid(row=0, column=0)
      pricee = tickerData.history()
      cost = (pricee.tail(1)['Close'].iloc[0])
      pricee = tk.Label(win, text=cost)
      pricee.grid(row=1, column=0)
      win.update()
      i+=1


def retrieve_input():
   inputvalue = text_box.get("1.0", "end-1c")
   newButton = Button(top, height=1, width=10, text=inputvalue, command=lambda: PullData(inputvalue))
   newButton.pack()


def Exit():
   print("Program exit")
   os._exit(0)


top = tk.Tk()
w = 200
h = top.winfo_screenheight()-80
Status=True
screen_width = top.winfo_screenwidth()
screen_height = top.winfo_screenheight()
xp = (screen_width)-200
yp = (screen_height/2) - (h/2)
top.geometry('%dx%d+%d+%d'%(w,h,xp,yp))
top.attributes('-alpha', 1)
top.title('Overlay')
top.overrideredirect(True)
Made = False
top.update()
top.withdraw()
text_box = tk.Text(top, width = xp, height = 2)
text_box.tag_configure("center",justify='center')
text_box.insert("1.0", "AAPL")
text_box.tag_add("center", "1.0", "end")
text_box.pack()
Hide = False
buttonCommit=Button(top, height=1, width=10, text="Commit",
                    command=lambda: retrieve_input())
ExitButton=Button(top, height=1, width=10, text="Exit",
                    command=lambda: Exit())
buttonCommit.pack()
ExitButton.pack()

#Stock Initialization
tickerSym="MSFT"
#get data on this ticker
tickerData = yf.Ticker(tickerSym)

#get the historical prices for this ticker
tickerDf = tickerData.history(period='1d', start='2021-3-29', end='2021-3-30')


while(Status):
   gui = pyautogui.position()

   for item in tickersymbol:
      newButton = Button(top, height=1, width=10, text=item,
                    command=lambda: Exit())
      newButton.pack()




   if keyboard.is_pressed('q') and keyboard.is_pressed('ctrl') :
      top.destroy
      Status = False
   if keyboard.is_pressed('x') and keyboard.is_pressed('ctrl') :
      if Hide:
         Hide = False
      else:
         Hide = True


   if gui.x>1550 and gui.x<1920:
      top.deiconify()
      top.update()
      Made=True
   elif gui.x <1550 and Made :
      top.withdraw()
      Made = False



print("Overlay has successfully closed")
